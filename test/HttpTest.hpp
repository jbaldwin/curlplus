#pragma once

#include "catch.hpp"

#include <lift/Lift.hpp>

TEST_CASE("HTTP Method to_string")
{
    using namespace lift::http;
    REQUIRE(to_string(Method::GET) == METHOD_GET);
    REQUIRE(to_string(Method::HEAD) == METHOD_HEAD);
    REQUIRE(to_string(Method::POST) == METHOD_POST);
    REQUIRE(to_string(Method::PUT) == METHOD_PUT);
    REQUIRE(to_string(Method::DELETE) == METHOD_DELETE);
    REQUIRE(to_string(Method::CONNECT) == METHOD_CONNECT);
    REQUIRE(to_string(Method::OPTIONS) == METHOD_OPTIONS);
    REQUIRE(to_string(Method::PATCH) == METHOD_PATCH);
    REQUIRE(to_string(static_cast<Method>(1024)) == METHOD_UNKNOWN);
}

TEST_CASE("HTTP Version to_string")
{
    using namespace lift::http;
    REQUIRE(to_string(Version::USE_BEST) == VERSION_USE_BEST);
    REQUIRE(to_string(Version::V1_0) == VERSION_V1_0);
    REQUIRE(to_string(Version::V1_1) == VERSION_V1_1);
    REQUIRE(to_string(Version::V2_0) == VERSION_V2_0);
    REQUIRE(to_string(Version::V2_0_TLS) == VERSION_V2_0_TLS);
    REQUIRE(to_string(Version::V2_0_ONLY) == VERSION_V2_0_ONLY);
    REQUIRE(to_string(static_cast<Version>(1025)) == VERSION_UNKNOWN);
}

TEST_CASE("HTTP StatusCode to_string")
{
    using namespace lift::http;
    REQUIRE(to_string(StatusCode::HTTP_UNKNOWN) == STATUS_CODE_HTTP_UNKNOWN);
    REQUIRE(to_string(static_cast<StatusCode>(9001)) == STATUS_CODE_HTTP_UNKNOWN);

    REQUIRE(to_string(StatusCode::HTTP_100_CONTINUE) == STATUS_CODE_HTTP_100_CONTINUE);
    REQUIRE(to_string(StatusCode::HTTP_101_SWITCHING_PROTOCOLS) == STATUS_CODE_HTTP_101_SWITCHING_PROTOCOLS);
    REQUIRE(to_string(StatusCode::HTTP_102_PROCESSING) == STATUS_CODE_HTTP_102_PROCESSING);
    REQUIRE(to_string(StatusCode::HTTP_103_EARLY_HINTS) == STATUS_CODE_HTTP_103_EARLY_HINTS);

    REQUIRE(to_string(StatusCode::HTTP_200_OK) == STATUS_CODE_HTTP_200_OK);
    REQUIRE(to_string(StatusCode::HTTP_201_CREATED) == STATUS_CODE_HTTP_201_CREATED);
    REQUIRE(to_string(StatusCode::HTTP_202_ACCEPTED) == STATUS_CODE_HTTP_202_ACCEPTED);
    REQUIRE(to_string(StatusCode::HTTP_203_NON_AUTHORITATIVE_INFORMATION) == STATUS_CODE_HTTP_203_NON_AUTHORITATIVE_INFORMATION);
    REQUIRE(to_string(StatusCode::HTTP_204_NO_CONTENT) == STATUS_CODE_HTTP_204_NO_CONTENT);
    REQUIRE(to_string(StatusCode::HTTP_205_RESET_CONTENT) == STATUS_CODE_HTTP_205_RESET_CONTENT);
    REQUIRE(to_string(StatusCode::HTTP_206_PARTIAL_CONTENT) == STATUS_CODE_HTTP_206_PARTIAL_CONTENT);
    REQUIRE(to_string(StatusCode::HTTP_207_MULTI_STATUS) == STATUS_CODE_HTTP_207_MULTI_STATUS);
    REQUIRE(to_string(StatusCode::HTTP_208_ALREADY_REPORTED) == STATUS_CODE_HTTP_208_ALREADY_REPORTED);
    REQUIRE(to_string(StatusCode::HTTP_226_IM_USED) == STATUS_CODE_HTTP_226_IM_USED);

    REQUIRE(to_string(StatusCode::HTTP_300_MULTIPLE_CHOICES) == STATUS_CODE_HTTP_300_MULTIPLE_CHOICES);
    REQUIRE(to_string(StatusCode::HTTP_301_MOVED_PERMANENTLY) == STATUS_CODE_HTTP_301_MOVED_PERMANENTLY);
    REQUIRE(to_string(StatusCode::HTTP_302_FOUND) == STATUS_CODE_HTTP_302_FOUND);
    REQUIRE(to_string(StatusCode::HTTP_303_SEE_OTHER) == STATUS_CODE_HTTP_303_SEE_OTHER);
    REQUIRE(to_string(StatusCode::HTTP_304_NOT_MODIFIED) == STATUS_CODE_HTTP_304_NOT_MODIFIED);
    REQUIRE(to_string(StatusCode::HTTP_305_USE_PROXY) == STATUS_CODE_HTTP_305_USE_PROXY);
    REQUIRE(to_string(StatusCode::HTTP_306_SWITCH_PROXY) == STATUS_CODE_HTTP_306_SWITCH_PROXY);
    REQUIRE(to_string(StatusCode::HTTP_307_TEMPORARY_REDIRECT) == STATUS_CODE_HTTP_307_TEMPORARY_REDIRECT);
    REQUIRE(to_string(StatusCode::HTTP_308_PERMANENT_REDIRECT) == STATUS_CODE_HTTP_308_PERMANENT_REDIRECT);

    REQUIRE(to_string(StatusCode::HTTP_400_BAD_REQUEST) == STATUS_CODE_HTTP_400_BAD_REQUEST);
    REQUIRE(to_string(StatusCode::HTTP_401_UNAUTHORIZED) == STATUS_CODE_HTTP_401_UNAUTHORIZED);
    REQUIRE(to_string(StatusCode::HTTP_402_PAYMENT_REQUIRED) == STATUS_CODE_HTTP_402_PAYMENT_REQUIRED);
    REQUIRE(to_string(StatusCode::HTTP_403_FORBIDDEN) == STATUS_CODE_HTTP_403_FORBIDDEN);
    REQUIRE(to_string(StatusCode::HTTP_404_NOT_FOUND) == STATUS_CODE_HTTP_404_NOT_FOUND);
    REQUIRE(to_string(StatusCode::HTTP_405_METHOD_NOT_ALLOWED) == STATUS_CODE_HTTP_405_METHOD_NOT_ALLOWED);
    REQUIRE(to_string(StatusCode::HTTP_406_NOT_ACCEPTABLE) == STATUS_CODE_HTTP_406_NOT_ACCEPTABLE);
    REQUIRE(to_string(StatusCode::HTTP_407_PROXY_AUTHENTICATION_REQUIRED) == STATUS_CODE_HTTP_407_PROXY_AUTHENTICATION_REQUIRED);
    REQUIRE(to_string(StatusCode::HTTP_408_REQUEST_TIMEOUT) == STATUS_CODE_HTTP_408_REQUEST_TIMEOUT);
    REQUIRE(to_string(StatusCode::HTTP_409_CONFLICT) == STATUS_CODE_HTTP_409_CONFLICT);
    REQUIRE(to_string(StatusCode::HTTP_410_GONE) == STATUS_CODE_HTTP_410_GONE);
    REQUIRE(to_string(StatusCode::HTTP_411_LENGTH_REQUIRED) == STATUS_CODE_HTTP_411_LENGTH_REQUIRED);
    REQUIRE(to_string(StatusCode::HTTP_412_PRECONDITION_FAILED) == STATUS_CODE_HTTP_412_PRECONDITION_FAILED);
    REQUIRE(to_string(StatusCode::HTTP_413_PAYLOAD_TOO_LARGE) == STATUS_CODE_HTTP_413_PAYLOAD_TOO_LARGE);
    REQUIRE(to_string(StatusCode::HTTP_414_URI_TOO_LONG) == STATUS_CODE_HTTP_414_URI_TOO_LONG);
    REQUIRE(to_string(StatusCode::HTTP_415_UNSUPPORTED_MEDIA_TYPE) == STATUS_CODE_HTTP_415_UNSUPPORTED_MEDIA_TYPE);
    REQUIRE(to_string(StatusCode::HTTP_416_RANGE_NOT_SATISFIABLE) == STATUS_CODE_HTTP_416_RANGE_NOT_SATISFIABLE);
    REQUIRE(to_string(StatusCode::HTTP_417_EXPECTATION_FAILED) == STATUS_CODE_HTTP_417_EXPECTATION_FAILED);
    REQUIRE(to_string(StatusCode::HTTP_418_IM_A_TEAPOT) == STATUS_CODE_HTTP_418_IM_A_TEAPOT);
    REQUIRE(to_string(StatusCode::HTTP_421_MISDIRECTED_REQUEST) == STATUS_CODE_HTTP_421_MISDIRECTED_REQUEST);
    REQUIRE(to_string(StatusCode::HTTP_422_UNPROCESSABLE_ENTITY) == STATUS_CODE_HTTP_422_UNPROCESSABLE_ENTITY);
    REQUIRE(to_string(StatusCode::HTTP_423_LOCKED) == STATUS_CODE_HTTP_423_LOCKED);
    REQUIRE(to_string(StatusCode::HTTP_424_FAILED_DEPENDENCY) == STATUS_CODE_HTTP_424_FAILED_DEPENDENCY);
    REQUIRE(to_string(StatusCode::HTTP_425_TOO_EARLY) == STATUS_CODE_HTTP_425_TOO_EARLY);
    REQUIRE(to_string(StatusCode::HTTP_426_UPGRADE_REQUIRED) == STATUS_CODE_HTTP_426_UPGRADE_REQUIRED);
    REQUIRE(to_string(StatusCode::HTTP_428_PRECONDITION_REQUIRED) == STATUS_CODE_HTTP_428_PRECONDITION_REQUIRED);
    REQUIRE(to_string(StatusCode::HTTP_429_TOO_MANY_REQUESTS) == STATUS_CODE_HTTP_429_TOO_MANY_REQUESTS);
    REQUIRE(to_string(StatusCode::HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE) == STATUS_CODE_HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE);
    REQUIRE(to_string(StatusCode::HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS) == STATUS_CODE_HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS);

    REQUIRE(to_string(StatusCode::HTTP_500_INTERNAL_SERVER_ERROR) == STATUS_CODE_HTTP_500_INTERNAL_SERVER_ERROR);
    REQUIRE(to_string(StatusCode::HTTP_501_NOT_IMPLEMENTED) == STATUS_CODE_HTTP_501_NOT_IMPLEMENTED);
    REQUIRE(to_string(StatusCode::HTTP_502_BAD_GATEWAY) == STATUS_CODE_HTTP_502_BAD_GATEWAY);
    REQUIRE(to_string(StatusCode::HTTP_503_SERVICE_UNAVAILABLE) == STATUS_CODE_HTTP_503_SERVICE_UNAVAILABLE);
    REQUIRE(to_string(StatusCode::HTTP_504_GATEWAY_TIMEOUT) == STATUS_CODE_HTTP_504_GATEWAY_TIMEOUT);
    REQUIRE(to_string(StatusCode::HTTP_505_HTTP_VERSION_NOT_SUPPORTED) == STATUS_CODE_HTTP_505_HTTP_VERSION_NOT_SUPPORTED);
    REQUIRE(to_string(StatusCode::HTTP_506_VARIANT_ALSO_NEGOTIATES) == STATUS_CODE_HTTP_506_VARIANT_ALSO_NEGOTIATES);
    REQUIRE(to_string(StatusCode::HTTP_507_INSUFFICIENT_STORAGE) == STATUS_CODE_HTTP_507_INSUFFICIENT_STORAGE);
    REQUIRE(to_string(StatusCode::HTTP_508_LOOP_DETECTED) == STATUS_CODE_HTTP_508_LOOP_DETECTED);
    REQUIRE(to_string(StatusCode::HTTP_510_NOT_EXTENDED) == STATUS_CODE_HTTP_510_NOT_EXTENDED);
    REQUIRE(to_string(StatusCode::HTTP_511_NETWORK_AUTHENTICATION_REQUIRED) == STATUS_CODE_HTTP_511_NETWORK_AUTHENTICATION_REQUIRED);
}

TEST_CASE("HTTP StatusCode to_enum")
{
    using namespace lift::http;

    REQUIRE(to_enum(0) == StatusCode::HTTP_UNKNOWN);
    REQUIRE(to_enum(9001) == StatusCode::HTTP_UNKNOWN);

    REQUIRE(to_enum(100) == StatusCode::HTTP_100_CONTINUE);
    REQUIRE(to_enum(101) == StatusCode::HTTP_101_SWITCHING_PROTOCOLS);
    REQUIRE(to_enum(102) == StatusCode::HTTP_102_PROCESSING);
    REQUIRE(to_enum(103) == StatusCode::HTTP_103_EARLY_HINTS);

    REQUIRE(to_enum(200) == StatusCode::HTTP_200_OK);
    REQUIRE(to_enum(201) == StatusCode::HTTP_201_CREATED);
    REQUIRE(to_enum(202) == StatusCode::HTTP_202_ACCEPTED);
    REQUIRE(to_enum(203) == StatusCode::HTTP_203_NON_AUTHORITATIVE_INFORMATION);
    REQUIRE(to_enum(204) == StatusCode::HTTP_204_NO_CONTENT);
    REQUIRE(to_enum(205) == StatusCode::HTTP_205_RESET_CONTENT);
    REQUIRE(to_enum(206) == StatusCode::HTTP_206_PARTIAL_CONTENT);
    REQUIRE(to_enum(207) == StatusCode::HTTP_207_MULTI_STATUS);
    REQUIRE(to_enum(208) == StatusCode::HTTP_208_ALREADY_REPORTED);
    REQUIRE(to_enum(226) == StatusCode::HTTP_226_IM_USED);

    REQUIRE(to_enum(300) == StatusCode::HTTP_300_MULTIPLE_CHOICES);
    REQUIRE(to_enum(301) == StatusCode::HTTP_301_MOVED_PERMANENTLY);
    REQUIRE(to_enum(302) == StatusCode::HTTP_302_FOUND);
    REQUIRE(to_enum(303) == StatusCode::HTTP_303_SEE_OTHER);
    REQUIRE(to_enum(304) == StatusCode::HTTP_304_NOT_MODIFIED);
    REQUIRE(to_enum(305) == StatusCode::HTTP_305_USE_PROXY);
    REQUIRE(to_enum(306) == StatusCode::HTTP_306_SWITCH_PROXY);
    REQUIRE(to_enum(307) == StatusCode::HTTP_307_TEMPORARY_REDIRECT);
    REQUIRE(to_enum(308) == StatusCode::HTTP_308_PERMANENT_REDIRECT);

    REQUIRE(to_enum(400) == StatusCode::HTTP_400_BAD_REQUEST);
    REQUIRE(to_enum(401) == StatusCode::HTTP_401_UNAUTHORIZED);
    REQUIRE(to_enum(402) == StatusCode::HTTP_402_PAYMENT_REQUIRED);
    REQUIRE(to_enum(403) == StatusCode::HTTP_403_FORBIDDEN);
    REQUIRE(to_enum(404) == StatusCode::HTTP_404_NOT_FOUND);
    REQUIRE(to_enum(405) == StatusCode::HTTP_405_METHOD_NOT_ALLOWED);
    REQUIRE(to_enum(406) == StatusCode::HTTP_406_NOT_ACCEPTABLE);
    REQUIRE(to_enum(407) == StatusCode::HTTP_407_PROXY_AUTHENTICATION_REQUIRED);
    REQUIRE(to_enum(408) == StatusCode::HTTP_408_REQUEST_TIMEOUT);
    REQUIRE(to_enum(409) == StatusCode::HTTP_409_CONFLICT);
    REQUIRE(to_enum(410) == StatusCode::HTTP_410_GONE);
    REQUIRE(to_enum(411) == StatusCode::HTTP_411_LENGTH_REQUIRED);
    REQUIRE(to_enum(412) == StatusCode::HTTP_412_PRECONDITION_FAILED);
    REQUIRE(to_enum(413) == StatusCode::HTTP_413_PAYLOAD_TOO_LARGE);
    REQUIRE(to_enum(414) == StatusCode::HTTP_414_URI_TOO_LONG);
    REQUIRE(to_enum(415) == StatusCode::HTTP_415_UNSUPPORTED_MEDIA_TYPE);
    REQUIRE(to_enum(416) == StatusCode::HTTP_416_RANGE_NOT_SATISFIABLE);
    REQUIRE(to_enum(417) == StatusCode::HTTP_417_EXPECTATION_FAILED);
    REQUIRE(to_enum(418) == StatusCode::HTTP_418_IM_A_TEAPOT);
    REQUIRE(to_enum(421) == StatusCode::HTTP_421_MISDIRECTED_REQUEST);
    REQUIRE(to_enum(422) == StatusCode::HTTP_422_UNPROCESSABLE_ENTITY);
    REQUIRE(to_enum(423) == StatusCode::HTTP_423_LOCKED);
    REQUIRE(to_enum(424) == StatusCode::HTTP_424_FAILED_DEPENDENCY);
    REQUIRE(to_enum(425) == StatusCode::HTTP_425_TOO_EARLY);
    REQUIRE(to_enum(426) == StatusCode::HTTP_426_UPGRADE_REQUIRED);
    REQUIRE(to_enum(428) == StatusCode::HTTP_428_PRECONDITION_REQUIRED);
    REQUIRE(to_enum(429) == StatusCode::HTTP_429_TOO_MANY_REQUESTS);
    REQUIRE(to_enum(431) == StatusCode::HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE);
    REQUIRE(to_enum(451) == StatusCode::HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS);

    REQUIRE(to_enum(500) == StatusCode::HTTP_500_INTERNAL_SERVER_ERROR);
    REQUIRE(to_enum(501) == StatusCode::HTTP_501_NOT_IMPLEMENTED);
    REQUIRE(to_enum(502) == StatusCode::HTTP_502_BAD_GATEWAY);
    REQUIRE(to_enum(503) == StatusCode::HTTP_503_SERVICE_UNAVAILABLE);
    REQUIRE(to_enum(504) == StatusCode::HTTP_504_GATEWAY_TIMEOUT);
    REQUIRE(to_enum(505) == StatusCode::HTTP_505_HTTP_VERSION_NOT_SUPPORTED);
    REQUIRE(to_enum(506) == StatusCode::HTTP_506_VARIANT_ALSO_NEGOTIATES);
    REQUIRE(to_enum(507) == StatusCode::HTTP_507_INSUFFICIENT_STORAGE);
    REQUIRE(to_enum(508) == StatusCode::HTTP_508_LOOP_DETECTED);
    REQUIRE(to_enum(510) == StatusCode::HTTP_510_NOT_EXTENDED);
    REQUIRE(to_enum(511) == StatusCode::HTTP_511_NETWORK_AUTHENTICATION_REQUIRED);
}

TEST_CASE("HTTP ContentType to_string")
{
    using namespace lift::http;
    REQUIRE(to_string(ContentType::UNKNOWN) == CONTENT_TYPE_UNKNOWN);
    REQUIRE(to_string(static_cast<ContentType>(928384)) == CONTENT_TYPE_UNKNOWN);

    REQUIRE(to_string(ContentType::NO_CONTENT) == CONTENT_TYPE_NO_CONTENT);

    REQUIRE(to_string(ContentType::TEXT_CSS) == CONTENT_TYPE_TEXT_CSS);
    REQUIRE(to_string(ContentType::TEXT_CSV) == CONTENT_TYPE_TEXT_CSV);
    REQUIRE(to_string(ContentType::TEXT_HTML) == CONTENT_TYPE_TEXT_HTML);
    REQUIRE(to_string(ContentType::TEXT_PLAIN) == CONTENT_TYPE_TEXT_PLAIN);
    REQUIRE(to_string(ContentType::TEXT_XML) == CONTENT_TYPE_TEXT_XML);

    REQUIRE(to_string(ContentType::IMAGE_GIF) == CONTENT_TYPE_IMAGE_GIF);
    REQUIRE(to_string(ContentType::IMAGE_JPEG) == CONTENT_TYPE_IMAGE_JPEG);
    REQUIRE(to_string(ContentType::IMAGE_PNG) == CONTENT_TYPE_IMAGE_PNG);
    REQUIRE(to_string(ContentType::IMAGE_TIFF) == CONTENT_TYPE_IMAGE_TIFF);
    REQUIRE(to_string(ContentType::IMAGE_X_ICON) == CONTENT_TYPE_IMAGE_X_ICON);
    REQUIRE(to_string(ContentType::IMAGE_SVG_XML) == CONTENT_TYPE_IMAGE_SVG_XML);

    REQUIRE(to_string(ContentType::VIDEO_MPEG) == CONTENT_TYPE_VIDEO_MPEG);
    REQUIRE(to_string(ContentType::VIDEO_MP4) == CONTENT_TYPE_VIDEO_MP4);
    REQUIRE(to_string(ContentType::VIDEO_X_FLV) == CONTENT_TYPE_VIDEO_X_FLV);
    REQUIRE(to_string(ContentType::VIDEO_WEBM) == CONTENT_TYPE_VIDEO_WEBM);

    REQUIRE(to_string(ContentType::MULTIPART_MIXED) == CONTENT_TYPE_MULTIPART_MIXED);
    REQUIRE(to_string(ContentType::MULTIPART_ALTERNATIVE) == CONTENT_TYPE_MULTIPART_ALTERNATIVE);
    REQUIRE(to_string(ContentType::MULTIPART_RELATED) == CONTENT_TYPE_MULTIPART_RELATED);
    REQUIRE(to_string(ContentType::MULTIPART_FORM_DATA) == CONTENT_TYPE_MULTIPART_FORM_DATA);

    REQUIRE(to_string(ContentType::AUDIO_MPEG) == CONTENT_TYPE_AUDIO_MPEG);
    REQUIRE(to_string(ContentType::AUDIO_X_MS_WMA) == CONTENT_TYPE_AUDIO_X_MS_WMA);
    REQUIRE(to_string(ContentType::AUDIO_X_WAV) == CONTENT_TYPE_AUDIO_X_WAV);

    REQUIRE(to_string(ContentType::APPLICATION_JAVASCRIPT) == CONTENT_TYPE_APPLICATION_JAVASCRIPT);
    REQUIRE(to_string(ContentType::APPLICATION_OCTET_STREAM) == CONTENT_TYPE_APPLICATION_OCTET_STREAM);
    REQUIRE(to_string(ContentType::APPLICATION_OGG) == CONTENT_TYPE_APPLICATION_OGG);
    REQUIRE(to_string(ContentType::APPLICATION_PDF) == CONTENT_TYPE_APPLICATION_PDF);
    REQUIRE(to_string(ContentType::APPLICATION_XHTML_XML) == CONTENT_TYPE_APPLICATION_XHTML_XML);
    REQUIRE(to_string(ContentType::APPLICATION_X_SHOCKWAVE_FLASH) == CONTENT_TYPE_APPLICATION_X_SHOCKWAVE_FLASH);
    REQUIRE(to_string(ContentType::APPLICATION_JSON) == CONTENT_TYPE_APPLICATION_JSON);
    REQUIRE(to_string(ContentType::APPLICATION_LD_JSON) == CONTENT_TYPE_APPLICATION_LD_JSON);
    REQUIRE(to_string(ContentType::APPLICATION_XML) == CONTENT_TYPE_APPLICATION_XML);
    REQUIRE(to_string(ContentType::APPLICATION_ZIP) == CONTENT_TYPE_APPLICATION_ZIP);
    REQUIRE(to_string(ContentType::APPLICATION_X_WWW_FORM_URLENCODED) == CONTENT_TYPE_APPLICATION_X_WWW_FORM_URLENCODED);
}

TEST_CASE("HTTP ConnectionType to_string")
{
    using namespace lift::http;
    REQUIRE(to_string(ConnectionType::CLOSE) == CONNECTION_TYPE_CLOSE);
    REQUIRE(to_string(ConnectionType::KEEP_ALIVE) == CONNECTION_TYPE_KEEP_ALIVE);
    REQUIRE(to_string(ConnectionType::UPGRADE) == CONNECTION_TYPE_UPGRADE);
    REQUIRE(to_string(static_cast<ConnectionType>(3839)) == CONNECTION_TYPE_UNKNOWN);
}